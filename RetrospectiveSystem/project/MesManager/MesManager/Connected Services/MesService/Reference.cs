//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MesManager.MesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginUser", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum LoginUser : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ORDINARY_USER = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ADMIN_USER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TOURIST_USER = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginResult", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum LoginResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USER_NAME_ERR = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USER_PWD_ERR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USER_NAME_PWD_ERR = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FAIL_EXCEP = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESS = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryResult", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum QueryResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXIST_DATA = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE_DATE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXCEPT_ERR = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisterResult", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum RegisterResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_SUCCESS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_EXIST_USER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_FAIL_SQL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_ERR = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationID {
            get {
                return this.StationIDField;
            }
            set {
                if ((this.StationIDField.Equals(value) != true)) {
                    this.StationIDField = value;
                    this.RaisePropertyChanged("StationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationName {
            get {
                return this.StationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StationNameField, value) != true)) {
                    this.StationNameField = value;
                    this.RaisePropertyChanged("StationName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MaterialMsg", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    [System.SerializableAttribute()]
    public partial class MaterialMsg : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaterialAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Sn_InnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Sn_OutterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaterialAmount {
            get {
                return this.MaterialAmountField;
            }
            set {
                if ((this.MaterialAmountField.Equals(value) != true)) {
                    this.MaterialAmountField = value;
                    this.RaisePropertyChanged("MaterialAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialCode {
            get {
                return this.MaterialCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialCodeField, value) != true)) {
                    this.MaterialCodeField = value;
                    this.RaisePropertyChanged("MaterialCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sn_Inner {
            get {
                return this.Sn_InnerField;
            }
            set {
                if ((object.ReferenceEquals(this.Sn_InnerField, value) != true)) {
                    this.Sn_InnerField = value;
                    this.RaisePropertyChanged("Sn_Inner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sn_Outter {
            get {
                return this.Sn_OutterField;
            }
            set {
                if ((object.ReferenceEquals(this.Sn_OutterField, value) != true)) {
                    this.Sn_OutterField = value;
                    this.RaisePropertyChanged("Sn_Outter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationName {
            get {
                return this.StationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StationNameField, value) != true)) {
                    this.StationNameField = value;
                    this.RaisePropertyChanged("StationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeNo {
            get {
                return this.TypeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNoField, value) != true)) {
                    this.TypeNoField = value;
                    this.RaisePropertyChanged("TypeNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageProduct", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    [System.SerializableAttribute()]
    public partial class PackageProduct : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BindingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BindingStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SnOutterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BindingDate {
            get {
                return this.BindingDateField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingDateField, value) != true)) {
                    this.BindingDateField = value;
                    this.RaisePropertyChanged("BindingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BindingState {
            get {
                return this.BindingStateField;
            }
            set {
                if ((this.BindingStateField.Equals(value) != true)) {
                    this.BindingStateField = value;
                    this.RaisePropertyChanged("BindingState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CaseCode {
            get {
                return this.CaseCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CaseCodeField, value) != true)) {
                    this.CaseCodeField = value;
                    this.RaisePropertyChanged("CaseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnOutter {
            get {
                return this.SnOutterField;
            }
            set {
                if ((object.ReferenceEquals(this.SnOutterField, value) != true)) {
                    this.SnOutterField = value;
                    this.RaisePropertyChanged("SnOutter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeNo {
            get {
                return this.TypeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNoField, value) != true)) {
                    this.TypeNoField = value;
                    this.RaisePropertyChanged("TypeNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MesService.IMesService")]
    public interface IMesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Login", ReplyAction="http://tempuri.org/IMesService/LoginResponse")]
        MesManager.MesService.LoginResult Login(string username, string password, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Login", ReplyAction="http://tempuri.org/IMesService/LoginResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.LoginResult> LoginAsync(string username, string password, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetUserInfo", ReplyAction="http://tempuri.org/IMesService/GetUserInfoResponse")]
        MesManager.MesService.GetUserInfoResponse GetUserInfo(MesManager.MesService.GetUserInfoRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetUserInfo", ReplyAction="http://tempuri.org/IMesService/GetUserInfoResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.GetUserInfoResponse> GetUserInfoAsync(MesManager.MesService.GetUserInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetAllUserInfo", ReplyAction="http://tempuri.org/IMesService/GetAllUserInfoResponse")]
        System.Data.DataSet GetAllUserInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetAllUserInfo", ReplyAction="http://tempuri.org/IMesService/GetAllUserInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllUserInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Register", ReplyAction="http://tempuri.org/IMesService/RegisterResponse")]
        MesManager.MesService.RegisterResult Register(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Register", ReplyAction="http://tempuri.org/IMesService/RegisterResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.RegisterResult> RegisterAsync(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/FirstCheck", ReplyAction="http://tempuri.org/IMesService/FirstCheckResponse")]
        string FirstCheck(string snInner, string snOutter, string sTypeNumber, string sStationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/FirstCheck", ReplyAction="http://tempuri.org/IMesService/FirstCheckResponse")]
        System.Threading.Tasks.Task<string> FirstCheckAsync(string snInner, string snOutter, string sTypeNumber, string sStationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteStation", ReplyAction="http://tempuri.org/IMesService/DeleteStationResponse")]
        int DeleteStation(string order, string stationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteStation", ReplyAction="http://tempuri.org/IMesService/DeleteStationResponse")]
        System.Threading.Tasks.Task<int> DeleteStationAsync(string order, string stationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectStation", ReplyAction="http://tempuri.org/IMesService/SelectStationResponse")]
        System.Data.DataSet SelectStation(string stationName, string stationOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectStation", ReplyAction="http://tempuri.org/IMesService/SelectStationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectStationAsync(string stationName, string stationOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertStation", ReplyAction="http://tempuri.org/IMesService/InsertStationResponse")]
        int InsertStation(MesManager.MesService.Station[] stationList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertStation", ReplyAction="http://tempuri.org/IMesService/InsertStationResponse")]
        System.Threading.Tasks.Task<int> InsertStationAsync(MesManager.MesService.Station[] stationList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductTypeNo", ReplyAction="http://tempuri.org/IMesService/DeleteProductTypeNoResponse")]
        int DeleteProductTypeNo(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductTypeNo", ReplyAction="http://tempuri.org/IMesService/DeleteProductTypeNoResponse")]
        System.Threading.Tasks.Task<int> DeleteProductTypeNoAsync(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllProductTypeNo", ReplyAction="http://tempuri.org/IMesService/DeleteAllProductTypeNoResponse")]
        int DeleteAllProductTypeNo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllProductTypeNo", ReplyAction="http://tempuri.org/IMesService/DeleteAllProductTypeNoResponse")]
        System.Threading.Tasks.Task<int> DeleteAllProductTypeNoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductTypeNo", ReplyAction="http://tempuri.org/IMesService/SelectProductTypeNoResponse")]
        System.Data.DataSet SelectProductTypeNo(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductTypeNo", ReplyAction="http://tempuri.org/IMesService/SelectProductTypeNoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectProductTypeNoAsync(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductTypeNo", ReplyAction="http://tempuri.org/IMesService/CommitProductTypeNoResponse")]
        string CommitProductTypeNo(string[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductTypeNo", ReplyAction="http://tempuri.org/IMesService/CommitProductTypeNoResponse")]
        System.Threading.Tasks.Task<string> CommitProductTypeNoAsync(string[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteAllTypeStationResponse")]
        int DeleteAllTypeStation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteAllTypeStationResponse")]
        System.Threading.Tasks.Task<int> DeleteAllTypeStationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteTypeStationResponse")]
        int DeleteTypeStation(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteTypeStationResponse")]
        System.Threading.Tasks.Task<int> DeleteTypeStationAsync(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTypeStation", ReplyAction="http://tempuri.org/IMesService/SelectTypeStationResponse")]
        System.Data.DataSet SelectTypeStation(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTypeStation", ReplyAction="http://tempuri.org/IMesService/SelectTypeStationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectTypeStationAsync(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitTypeStation", ReplyAction="http://tempuri.org/IMesService/CommitTypeStationResponse")]
        string CommitTypeStation(System.Collections.Generic.Dictionary<string, string[]> dctData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitTypeStation", ReplyAction="http://tempuri.org/IMesService/CommitTypeStationResponse")]
        System.Threading.Tasks.Task<string> CommitTypeStationAsync(System.Collections.Generic.Dictionary<string, string[]> dctData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertTestResultData", ReplyAction="http://tempuri.org/IMesService/InsertTestResultDataResponse")]
        string InsertTestResultData(string sn, string typeNo, string station, string dateTime, string result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertTestResultData", ReplyAction="http://tempuri.org/IMesService/InsertTestResultDataResponse")]
        System.Threading.Tasks.Task<string> InsertTestResultDataAsync(string sn, string typeNo, string station, string dateTime, string result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResult", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultResponse")]
        string SelectLastTestResult(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResult", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultResponse")]
        System.Threading.Tasks.Task<string> SelectLastTestResultAsync(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultUpperResponse")]
        System.Data.DataSet SelectLastTestResultUpper(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultUpperResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectLastTestResultUpperAsync(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectTestResultUpperResponse")]
        System.Data.DataSet SelectTestResultUpper(string sn, string typeNo, string station, bool IsSnFuzzy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectTestResultUpperResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectTestResultUpperAsync(string sn, string typeNo, string station, bool IsSnFuzzy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterial", ReplyAction="http://tempuri.org/IMesService/SelectMaterialResponse")]
        System.Data.DataSet SelectMaterial();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterial", ReplyAction="http://tempuri.org/IMesService/SelectMaterialResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitMaterial", ReplyAction="http://tempuri.org/IMesService/CommitMaterialResponse")]
        string CommitMaterial(MesManager.MesService.MaterialMsg[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitMaterial", ReplyAction="http://tempuri.org/IMesService/CommitMaterialResponse")]
        System.Threading.Tasks.Task<string> CommitMaterialAsync(MesManager.MesService.MaterialMsg[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteMaterialResponse")]
        int DeleteMaterial(string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteMaterialResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialAsync(string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductMaterial", ReplyAction="http://tempuri.org/IMesService/CommitProductMaterialResponse")]
        string CommitProductMaterial(System.Collections.Generic.Dictionary<string, string[]> keyValuePairs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductMaterial", ReplyAction="http://tempuri.org/IMesService/CommitProductMaterialResponse")]
        System.Threading.Tasks.Task<string> CommitProductMaterialAsync(System.Collections.Generic.Dictionary<string, string[]> keyValuePairs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductMaterial", ReplyAction="http://tempuri.org/IMesService/SelectProductMaterialResponse")]
        System.Data.DataSet SelectProductMaterial(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductMaterial", ReplyAction="http://tempuri.org/IMesService/SelectProductMaterialResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectProductMaterialAsync(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteProductMaterialResponse")]
        int DeleteProductMaterial(string typeNo, string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteProductMaterialResponse")]
        System.Threading.Tasks.Task<int> DeleteProductMaterialAsync(string typeNo, string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/InsertMaterialStatisticsResponse")]
        string InsertMaterialStatistics(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/InsertMaterialStatisticsResponse")]
        System.Threading.Tasks.Task<string> InsertMaterialStatisticsAsync(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/SelectMaterialStatisticsResponse")]
        System.Data.DataSet SelectMaterialStatistics(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/SelectMaterialStatisticsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialStatisticsAsync(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialMsg", ReplyAction="http://tempuri.org/IMesService/SelectMaterialMsgResponse")]
        System.Data.DataSet SelectMaterialMsg(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialMsg", ReplyAction="http://tempuri.org/IMesService/SelectMaterialMsgResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialMsgAsync(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitOutCaseBoxStorage", ReplyAction="http://tempuri.org/IMesService/CommitOutCaseBoxStorageResponse")]
        int CommitOutCaseBoxStorage(string out_case_code, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitOutCaseBoxStorage", ReplyAction="http://tempuri.org/IMesService/CommitOutCaseBoxStorageResponse")]
        System.Threading.Tasks.Task<int> CommitOutCaseBoxStorageAsync(string out_case_code, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectOutCaseBoxStorage", ReplyAction="http://tempuri.org/IMesService/SelectOutCaseBoxStorageResponse")]
        System.Data.DataSet SelectOutCaseBoxStorage(string caseCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectOutCaseBoxStorage", ReplyAction="http://tempuri.org/IMesService/SelectOutCaseBoxStorageResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectOutCaseBoxStorageAsync(string caseCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitPackageProduct", ReplyAction="http://tempuri.org/IMesService/CommitPackageProductResponse")]
        int CommitPackageProduct(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitPackageProduct", ReplyAction="http://tempuri.org/IMesService/CommitPackageProductResponse")]
        System.Threading.Tasks.Task<int> CommitPackageProductAsync(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdatePackageProduct", ReplyAction="http://tempuri.org/IMesService/UpdatePackageProductResponse")]
        int UpdatePackageProduct(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdatePackageProduct", ReplyAction="http://tempuri.org/IMesService/UpdatePackageProductResponse")]
        System.Threading.Tasks.Task<int> UpdatePackageProductAsync(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectPackageProduct", ReplyAction="http://tempuri.org/IMesService/SelectPackageProductResponse")]
        System.Data.DataSet SelectPackageProduct(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectPackageProduct", ReplyAction="http://tempuri.org/IMesService/SelectPackageProductResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectPackageProductAsync(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeletePackageProduct", ReplyAction="http://tempuri.org/IMesService/DeletePackageProductResponse")]
        int DeletePackageProduct(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeletePackageProduct", ReplyAction="http://tempuri.org/IMesService/DeletePackageProductResponse")]
        System.Threading.Tasks.Task<int> DeletePackageProductAsync(MesManager.MesService.PackageProduct packageProduct);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string userName;
        
        public GetUserInfoRequest() {
        }
        
        public GetUserInfoRequest(string userName) {
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserInfoResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MesManager.MesService.QueryResult GetUserInfoResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataSet dataSet;
        
        public GetUserInfoResponse() {
        }
        
        public GetUserInfoResponse(MesManager.MesService.QueryResult GetUserInfoResult, System.Data.DataSet dataSet) {
            this.GetUserInfoResult = GetUserInfoResult;
            this.dataSet = dataSet;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMesServiceChannel : MesManager.MesService.IMesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MesServiceClient : System.ServiceModel.ClientBase<MesManager.MesService.IMesService>, MesManager.MesService.IMesService {
        
        public MesServiceClient() {
        }
        
        public MesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MesManager.MesService.LoginResult Login(string username, string password, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.Login(username, password, loginUser);
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.LoginResult> LoginAsync(string username, string password, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.LoginAsync(username, password, loginUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MesManager.MesService.GetUserInfoResponse MesManager.MesService.IMesService.GetUserInfo(MesManager.MesService.GetUserInfoRequest request) {
            return base.Channel.GetUserInfo(request);
        }
        
        public MesManager.MesService.QueryResult GetUserInfo(string userName, out System.Data.DataSet dataSet) {
            MesManager.MesService.GetUserInfoRequest inValue = new MesManager.MesService.GetUserInfoRequest();
            inValue.userName = userName;
            MesManager.MesService.GetUserInfoResponse retVal = ((MesManager.MesService.IMesService)(this)).GetUserInfo(inValue);
            dataSet = retVal.dataSet;
            return retVal.GetUserInfoResult;
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.GetUserInfoResponse> GetUserInfoAsync(MesManager.MesService.GetUserInfoRequest request) {
            return base.Channel.GetUserInfoAsync(request);
        }
        
        public System.Data.DataSet GetAllUserInfo() {
            return base.Channel.GetAllUserInfo();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllUserInfoAsync() {
            return base.Channel.GetAllUserInfoAsync();
        }
        
        public MesManager.MesService.RegisterResult Register(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.Register(username, pwd, phone, email, loginUser);
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.RegisterResult> RegisterAsync(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.RegisterAsync(username, pwd, phone, email, loginUser);
        }
        
        public string FirstCheck(string snInner, string snOutter, string sTypeNumber, string sStationName) {
            return base.Channel.FirstCheck(snInner, snOutter, sTypeNumber, sStationName);
        }
        
        public System.Threading.Tasks.Task<string> FirstCheckAsync(string snInner, string snOutter, string sTypeNumber, string sStationName) {
            return base.Channel.FirstCheckAsync(snInner, snOutter, sTypeNumber, sStationName);
        }
        
        public int DeleteStation(string order, string stationName) {
            return base.Channel.DeleteStation(order, stationName);
        }
        
        public System.Threading.Tasks.Task<int> DeleteStationAsync(string order, string stationName) {
            return base.Channel.DeleteStationAsync(order, stationName);
        }
        
        public System.Data.DataSet SelectStation(string stationName, string stationOrder) {
            return base.Channel.SelectStation(stationName, stationOrder);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectStationAsync(string stationName, string stationOrder) {
            return base.Channel.SelectStationAsync(stationName, stationOrder);
        }
        
        public int InsertStation(MesManager.MesService.Station[] stationList) {
            return base.Channel.InsertStation(stationList);
        }
        
        public System.Threading.Tasks.Task<int> InsertStationAsync(MesManager.MesService.Station[] stationList) {
            return base.Channel.InsertStationAsync(stationList);
        }
        
        public int DeleteProductTypeNo(string typeNo) {
            return base.Channel.DeleteProductTypeNo(typeNo);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductTypeNoAsync(string typeNo) {
            return base.Channel.DeleteProductTypeNoAsync(typeNo);
        }
        
        public int DeleteAllProductTypeNo() {
            return base.Channel.DeleteAllProductTypeNo();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllProductTypeNoAsync() {
            return base.Channel.DeleteAllProductTypeNoAsync();
        }
        
        public System.Data.DataSet SelectProductTypeNo(string typeNo) {
            return base.Channel.SelectProductTypeNo(typeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectProductTypeNoAsync(string typeNo) {
            return base.Channel.SelectProductTypeNoAsync(typeNo);
        }
        
        public string CommitProductTypeNo(string[] list) {
            return base.Channel.CommitProductTypeNo(list);
        }
        
        public System.Threading.Tasks.Task<string> CommitProductTypeNoAsync(string[] list) {
            return base.Channel.CommitProductTypeNoAsync(list);
        }
        
        public int DeleteAllTypeStation() {
            return base.Channel.DeleteAllTypeStation();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllTypeStationAsync() {
            return base.Channel.DeleteAllTypeStationAsync();
        }
        
        public int DeleteTypeStation(string typeNumber) {
            return base.Channel.DeleteTypeStation(typeNumber);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTypeStationAsync(string typeNumber) {
            return base.Channel.DeleteTypeStationAsync(typeNumber);
        }
        
        public System.Data.DataSet SelectTypeStation(string typeNumber) {
            return base.Channel.SelectTypeStation(typeNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectTypeStationAsync(string typeNumber) {
            return base.Channel.SelectTypeStationAsync(typeNumber);
        }
        
        public string CommitTypeStation(System.Collections.Generic.Dictionary<string, string[]> dctData) {
            return base.Channel.CommitTypeStation(dctData);
        }
        
        public System.Threading.Tasks.Task<string> CommitTypeStationAsync(System.Collections.Generic.Dictionary<string, string[]> dctData) {
            return base.Channel.CommitTypeStationAsync(dctData);
        }
        
        public string InsertTestResultData(string sn, string typeNo, string station, string dateTime, string result) {
            return base.Channel.InsertTestResultData(sn, typeNo, station, dateTime, result);
        }
        
        public System.Threading.Tasks.Task<string> InsertTestResultDataAsync(string sn, string typeNo, string station, string dateTime, string result) {
            return base.Channel.InsertTestResultDataAsync(sn, typeNo, station, dateTime, result);
        }
        
        public string SelectLastTestResult(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResult(sn, typeNo, station);
        }
        
        public System.Threading.Tasks.Task<string> SelectLastTestResultAsync(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResultAsync(sn, typeNo, station);
        }
        
        public System.Data.DataSet SelectLastTestResultUpper(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResultUpper(sn, typeNo, station);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectLastTestResultUpperAsync(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResultUpperAsync(sn, typeNo, station);
        }
        
        public System.Data.DataSet SelectTestResultUpper(string sn, string typeNo, string station, bool IsSnFuzzy) {
            return base.Channel.SelectTestResultUpper(sn, typeNo, station, IsSnFuzzy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectTestResultUpperAsync(string sn, string typeNo, string station, bool IsSnFuzzy) {
            return base.Channel.SelectTestResultUpperAsync(sn, typeNo, station, IsSnFuzzy);
        }
        
        public System.Data.DataSet SelectMaterial() {
            return base.Channel.SelectMaterial();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialAsync() {
            return base.Channel.SelectMaterialAsync();
        }
        
        public string CommitMaterial(MesManager.MesService.MaterialMsg[] list) {
            return base.Channel.CommitMaterial(list);
        }
        
        public System.Threading.Tasks.Task<string> CommitMaterialAsync(MesManager.MesService.MaterialMsg[] list) {
            return base.Channel.CommitMaterialAsync(list);
        }
        
        public int DeleteMaterial(string materialCode) {
            return base.Channel.DeleteMaterial(materialCode);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialAsync(string materialCode) {
            return base.Channel.DeleteMaterialAsync(materialCode);
        }
        
        public string CommitProductMaterial(System.Collections.Generic.Dictionary<string, string[]> keyValuePairs) {
            return base.Channel.CommitProductMaterial(keyValuePairs);
        }
        
        public System.Threading.Tasks.Task<string> CommitProductMaterialAsync(System.Collections.Generic.Dictionary<string, string[]> keyValuePairs) {
            return base.Channel.CommitProductMaterialAsync(keyValuePairs);
        }
        
        public System.Data.DataSet SelectProductMaterial(string typeNo) {
            return base.Channel.SelectProductMaterial(typeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectProductMaterialAsync(string typeNo) {
            return base.Channel.SelectProductMaterialAsync(typeNo);
        }
        
        public int DeleteProductMaterial(string typeNo, string materialCode) {
            return base.Channel.DeleteProductMaterial(typeNo, materialCode);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductMaterialAsync(string typeNo, string materialCode) {
            return base.Channel.DeleteProductMaterialAsync(typeNo, materialCode);
        }
        
        public string InsertMaterialStatistics(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount) {
            return base.Channel.InsertMaterialStatistics(snInner, snOutter, typeNo, stationName, materialCode, amount);
        }
        
        public System.Threading.Tasks.Task<string> InsertMaterialStatisticsAsync(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount) {
            return base.Channel.InsertMaterialStatisticsAsync(snInner, snOutter, typeNo, stationName, materialCode, amount);
        }
        
        public System.Data.DataSet SelectMaterialStatistics(string typeNo) {
            return base.Channel.SelectMaterialStatistics(typeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialStatisticsAsync(string typeNo) {
            return base.Channel.SelectMaterialStatisticsAsync(typeNo);
        }
        
        public System.Data.DataSet SelectMaterialMsg(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll) {
            return base.Channel.SelectMaterialMsg(materialMsg, IsSelectAll);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialMsgAsync(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll) {
            return base.Channel.SelectMaterialMsgAsync(materialMsg, IsSelectAll);
        }
        
        public int CommitOutCaseBoxStorage(string out_case_code, string amount) {
            return base.Channel.CommitOutCaseBoxStorage(out_case_code, amount);
        }
        
        public System.Threading.Tasks.Task<int> CommitOutCaseBoxStorageAsync(string out_case_code, string amount) {
            return base.Channel.CommitOutCaseBoxStorageAsync(out_case_code, amount);
        }
        
        public System.Data.DataSet SelectOutCaseBoxStorage(string caseCode) {
            return base.Channel.SelectOutCaseBoxStorage(caseCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectOutCaseBoxStorageAsync(string caseCode) {
            return base.Channel.SelectOutCaseBoxStorageAsync(caseCode);
        }
        
        public int CommitPackageProduct(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.CommitPackageProduct(packageProduct);
        }
        
        public System.Threading.Tasks.Task<int> CommitPackageProductAsync(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.CommitPackageProductAsync(packageProduct);
        }
        
        public int UpdatePackageProduct(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.UpdatePackageProduct(packageProduct);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePackageProductAsync(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.UpdatePackageProductAsync(packageProduct);
        }
        
        public System.Data.DataSet SelectPackageProduct(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.SelectPackageProduct(packageProduct);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectPackageProductAsync(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.SelectPackageProductAsync(packageProduct);
        }
        
        public int DeletePackageProduct(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.DeletePackageProduct(packageProduct);
        }
        
        public System.Threading.Tasks.Task<int> DeletePackageProductAsync(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.DeletePackageProductAsync(packageProduct);
        }
    }
}
