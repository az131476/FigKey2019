//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MesManager.MesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginUser", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum LoginUser : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ORDINARY_USER = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ADMIN_USER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TOURIST_USER = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginResult", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum LoginResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USER_NAME_ERR = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USER_PWD_ERR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USER_NAME_PWD_ERR = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FAIL_EXCEP = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESS = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryResult", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum QueryResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXIST_DATA = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE_DATE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXCEPT_ERR = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisterResult", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    public enum RegisterResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_SUCCESS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_EXIST_USER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_FAIL_SQL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGISTER_ERR = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProcessStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessState {
            get {
                return this.ProcessStateField;
            }
            set {
                if ((this.ProcessStateField.Equals(value) != true)) {
                    this.ProcessStateField = value;
                    this.RaisePropertyChanged("ProcessState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationID {
            get {
                return this.StationIDField;
            }
            set {
                if ((this.StationIDField.Equals(value) != true)) {
                    this.StationIDField = value;
                    this.RaisePropertyChanged("StationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationName {
            get {
                return this.StationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StationNameField, value) != true)) {
                    this.StationNameField = value;
                    this.RaisePropertyChanged("StationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MaterialMsg", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    [System.SerializableAttribute()]
    public partial class MaterialMsg : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescribleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLOTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialPNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialRIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Sn_InnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Sn_OutterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Describle {
            get {
                return this.DescribleField;
            }
            set {
                if ((object.ReferenceEquals(this.DescribleField, value) != true)) {
                    this.DescribleField = value;
                    this.RaisePropertyChanged("Describle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialCode {
            get {
                return this.MaterialCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialCodeField, value) != true)) {
                    this.MaterialCodeField = value;
                    this.RaisePropertyChanged("MaterialCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLOT {
            get {
                return this.MaterialLOTField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLOTField, value) != true)) {
                    this.MaterialLOTField = value;
                    this.RaisePropertyChanged("MaterialLOT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialName {
            get {
                return this.MaterialNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialNameField, value) != true)) {
                    this.MaterialNameField = value;
                    this.RaisePropertyChanged("MaterialName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialPN {
            get {
                return this.MaterialPNField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialPNField, value) != true)) {
                    this.MaterialPNField = value;
                    this.RaisePropertyChanged("MaterialPN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialRID {
            get {
                return this.MaterialRIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialRIDField, value) != true)) {
                    this.MaterialRIDField = value;
                    this.RaisePropertyChanged("MaterialRID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sn_Inner {
            get {
                return this.Sn_InnerField;
            }
            set {
                if ((object.ReferenceEquals(this.Sn_InnerField, value) != true)) {
                    this.Sn_InnerField = value;
                    this.RaisePropertyChanged("Sn_Inner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sn_Outter {
            get {
                return this.Sn_OutterField;
            }
            set {
                if ((object.ReferenceEquals(this.Sn_OutterField, value) != true)) {
                    this.Sn_OutterField = value;
                    this.RaisePropertyChanged("Sn_Outter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationName {
            get {
                return this.StationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StationNameField, value) != true)) {
                    this.StationNameField = value;
                    this.RaisePropertyChanged("StationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeNo {
            get {
                return this.TypeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNoField, value) != true)) {
                    this.TypeNoField = value;
                    this.RaisePropertyChanged("TypeNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateDateField, value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductMaterial", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    [System.SerializableAttribute()]
    public partial class ProductMaterial : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescribleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Update_DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Describle {
            get {
                return this.DescribleField;
            }
            set {
                if ((object.ReferenceEquals(this.DescribleField, value) != true)) {
                    this.DescribleField = value;
                    this.RaisePropertyChanged("Describle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialCode {
            get {
                return this.MaterialCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialCodeField, value) != true)) {
                    this.MaterialCodeField = value;
                    this.RaisePropertyChanged("MaterialCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Stock {
            get {
                return this.StockField;
            }
            set {
                if ((object.ReferenceEquals(this.StockField, value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeNo {
            get {
                return this.TypeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNoField, value) != true)) {
                    this.TypeNoField = value;
                    this.RaisePropertyChanged("TypeNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Update_Date {
            get {
                return this.Update_DateField;
            }
            set {
                if ((object.ReferenceEquals(this.Update_DateField, value) != true)) {
                    this.Update_DateField = value;
                    this.RaisePropertyChanged("Update_Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageProduct", Namespace="http://schemas.datacontract.org/2004/07/MesAPI.Model")]
    [System.SerializableAttribute()]
    public partial class PackageProduct : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BindingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BindingStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SnOutterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BindingDate {
            get {
                return this.BindingDateField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingDateField, value) != true)) {
                    this.BindingDateField = value;
                    this.RaisePropertyChanged("BindingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BindingState {
            get {
                return this.BindingStateField;
            }
            set {
                if ((this.BindingStateField.Equals(value) != true)) {
                    this.BindingStateField = value;
                    this.RaisePropertyChanged("BindingState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CaseCode {
            get {
                return this.CaseCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CaseCodeField, value) != true)) {
                    this.CaseCodeField = value;
                    this.RaisePropertyChanged("CaseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnOutter {
            get {
                return this.SnOutterField;
            }
            set {
                if ((object.ReferenceEquals(this.SnOutterField, value) != true)) {
                    this.SnOutterField = value;
                    this.RaisePropertyChanged("SnOutter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeNo {
            get {
                return this.TypeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNoField, value) != true)) {
                    this.TypeNoField = value;
                    this.RaisePropertyChanged("TypeNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MesService.IMesService")]
    public interface IMesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/TestCommunication", ReplyAction="http://tempuri.org/IMesService/TestCommunicationResponse")]
        string TestCommunication(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/TestCommunication", ReplyAction="http://tempuri.org/IMesService/TestCommunicationResponse")]
        System.Threading.Tasks.Task<string> TestCommunicationAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Login", ReplyAction="http://tempuri.org/IMesService/LoginResponse")]
        MesManager.MesService.LoginResult Login(string username, string password, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Login", ReplyAction="http://tempuri.org/IMesService/LoginResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.LoginResult> LoginAsync(string username, string password, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetUserInfo", ReplyAction="http://tempuri.org/IMesService/GetUserInfoResponse")]
        MesManager.MesService.GetUserInfoResponse GetUserInfo(MesManager.MesService.GetUserInfoRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetUserInfo", ReplyAction="http://tempuri.org/IMesService/GetUserInfoResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.GetUserInfoResponse> GetUserInfoAsync(MesManager.MesService.GetUserInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetAllUserInfo", ReplyAction="http://tempuri.org/IMesService/GetAllUserInfoResponse")]
        System.Data.DataSet GetAllUserInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/GetAllUserInfo", ReplyAction="http://tempuri.org/IMesService/GetAllUserInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllUserInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Register", ReplyAction="http://tempuri.org/IMesService/RegisterResponse")]
        MesManager.MesService.RegisterResult Register(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/Register", ReplyAction="http://tempuri.org/IMesService/RegisterResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.RegisterResult> RegisterAsync(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteStation", ReplyAction="http://tempuri.org/IMesService/DeleteStationResponse")]
        int DeleteStation(string processName, string stationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteStation", ReplyAction="http://tempuri.org/IMesService/DeleteStationResponse")]
        System.Threading.Tasks.Task<int> DeleteStationAsync(string processName, string stationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectStationList", ReplyAction="http://tempuri.org/IMesService/SelectStationListResponse")]
        System.Data.DataSet SelectStationList(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectStationList", ReplyAction="http://tempuri.org/IMesService/SelectStationListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectStationListAsync(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProcessList", ReplyAction="http://tempuri.org/IMesService/SelectProcessListResponse")]
        System.Data.DataSet SelectProcessList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProcessList", ReplyAction="http://tempuri.org/IMesService/SelectProcessListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectProcessListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllStation", ReplyAction="http://tempuri.org/IMesService/DeleteAllStationResponse")]
        int DeleteAllStation(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllStation", ReplyAction="http://tempuri.org/IMesService/DeleteAllStationResponse")]
        System.Threading.Tasks.Task<int> DeleteAllStationAsync(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertStation", ReplyAction="http://tempuri.org/IMesService/InsertStationResponse")]
        int InsertStation(MesManager.MesService.Station[] stationList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertStation", ReplyAction="http://tempuri.org/IMesService/InsertStationResponse")]
        System.Threading.Tasks.Task<int> InsertStationAsync(MesManager.MesService.Station[] stationList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SetCurrentProcess", ReplyAction="http://tempuri.org/IMesService/SetCurrentProcessResponse")]
        int SetCurrentProcess(string processName, int state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SetCurrentProcess", ReplyAction="http://tempuri.org/IMesService/SetCurrentProcessResponse")]
        System.Threading.Tasks.Task<int> SetCurrentProcessAsync(string processName, int state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteAllTypeStationResponse")]
        int DeleteAllTypeStation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteAllTypeStationResponse")]
        System.Threading.Tasks.Task<int> DeleteAllTypeStationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteTypeStationResponse")]
        int DeleteTypeStation(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteTypeStation", ReplyAction="http://tempuri.org/IMesService/DeleteTypeStationResponse")]
        System.Threading.Tasks.Task<int> DeleteTypeStationAsync(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTypeStation", ReplyAction="http://tempuri.org/IMesService/SelectTypeStationResponse")]
        System.Data.DataSet SelectTypeStation(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTypeStation", ReplyAction="http://tempuri.org/IMesService/SelectTypeStationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectTypeStationAsync(string typeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitTypeStation", ReplyAction="http://tempuri.org/IMesService/CommitTypeStationResponse")]
        string CommitTypeStation(System.Collections.Generic.Dictionary<string, string[]> dctData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitTypeStation", ReplyAction="http://tempuri.org/IMesService/CommitTypeStationResponse")]
        System.Threading.Tasks.Task<string> CommitTypeStationAsync(System.Collections.Generic.Dictionary<string, string[]> dctData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultUpperResponse")]
        System.Data.DataSet SelectLastTestResultUpper(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultUpperResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectLastTestResultUpperAsync(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectTestResultUpperResponse")]
        System.Data.DataSet SelectTestResultUpper(string sn, string typeNo, string station, bool IsSnFuzzy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestResultUpper", ReplyAction="http://tempuri.org/IMesService/SelectTestResultUpperResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectTestResultUpperAsync(string sn, string typeNo, string station, bool IsSnFuzzy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterial", ReplyAction="http://tempuri.org/IMesService/SelectMaterialResponse")]
        System.Data.DataSet SelectMaterial();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterial", ReplyAction="http://tempuri.org/IMesService/SelectMaterialResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitMaterial", ReplyAction="http://tempuri.org/IMesService/CommitMaterialResponse")]
        MesManager.MesService.MaterialMsg[] CommitMaterial(MesManager.MesService.MaterialMsg[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitMaterial", ReplyAction="http://tempuri.org/IMesService/CommitMaterialResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.MaterialMsg[]> CommitMaterialAsync(MesManager.MesService.MaterialMsg[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteMaterialResponse")]
        int DeleteMaterial(string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteMaterialResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialAsync(string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteAllMaterialResponse")]
        int DeleteAllMaterial();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteAllMaterialResponse")]
        System.Threading.Tasks.Task<int> DeleteAllMaterialAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductMaterial", ReplyAction="http://tempuri.org/IMesService/CommitProductMaterialResponse")]
        MesManager.MesService.ProductMaterial[] CommitProductMaterial(MesManager.MesService.ProductMaterial[] pmList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductMaterial", ReplyAction="http://tempuri.org/IMesService/CommitProductMaterialResponse")]
        System.Threading.Tasks.Task<MesManager.MesService.ProductMaterial[]> CommitProductMaterialAsync(MesManager.MesService.ProductMaterial[] pmList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductMaterial", ReplyAction="http://tempuri.org/IMesService/SelectProductMaterialResponse")]
        System.Data.DataSet SelectProductMaterial(MesManager.MesService.ProductMaterial material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductMaterial", ReplyAction="http://tempuri.org/IMesService/SelectProductMaterialResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectProductMaterialAsync(MesManager.MesService.ProductMaterial material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteProductMaterialResponse")]
        int DeleteProductMaterial(MesManager.MesService.ProductMaterial material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductMaterial", ReplyAction="http://tempuri.org/IMesService/DeleteProductMaterialResponse")]
        System.Threading.Tasks.Task<int> DeleteProductMaterialAsync(MesManager.MesService.ProductMaterial material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/InsertMaterialStatisticsResponse")]
        string InsertMaterialStatistics(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/InsertMaterialStatisticsResponse")]
        System.Threading.Tasks.Task<string> InsertMaterialStatisticsAsync(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/SelectMaterialStatisticsResponse")]
        System.Data.DataSet SelectMaterialStatistics(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/SelectMaterialStatisticsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialStatisticsAsync(string typeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialMsg", ReplyAction="http://tempuri.org/IMesService/SelectMaterialMsgResponse")]
        System.Data.DataSet SelectMaterialMsg(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialMsg", ReplyAction="http://tempuri.org/IMesService/SelectMaterialMsgResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialMsgAsync(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialUserProduct", ReplyAction="http://tempuri.org/IMesService/SelectMaterialUserProductResponse")]
        System.Data.DataSet SelectMaterialUserProduct(string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialUserProduct", ReplyAction="http://tempuri.org/IMesService/SelectMaterialUserProductResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialUserProductAsync(string materialCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/CommitProductContinairCapacityResponse")]
        int CommitProductContinairCapacity(string productTypeNo, string amount, string username, string describle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/CommitProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/CommitProductContinairCapacityResponse")]
        System.Threading.Tasks.Task<int> CommitProductContinairCapacityAsync(string productTypeNo, string amount, string username, string describle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/SelectProductContinairCapacityResponse")]
        System.Data.DataSet SelectProductContinairCapacity(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/SelectProductContinairCapacityResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectProductContinairCapacityAsync(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductBindingState", ReplyAction="http://tempuri.org/IMesService/SelectProductBindingStateResponse")]
        System.Data.DataSet SelectProductBindingState(string sn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductBindingState", ReplyAction="http://tempuri.org/IMesService/SelectProductBindingStateResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectProductBindingStateAsync(string sn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/DeleteProductContinairCapacityResponse")]
        int DeleteProductContinairCapacity(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/DeleteProductContinairCapacityResponse")]
        System.Threading.Tasks.Task<int> DeleteProductContinairCapacityAsync(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/DeleteAllProductContinairCapacityResponse")]
        int DeleteAllProductContinairCapacity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/DeleteAllProductContinairCapacity", ReplyAction="http://tempuri.org/IMesService/DeleteAllProductContinairCapacityResponse")]
        System.Threading.Tasks.Task<int> DeleteAllProductContinairCapacityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductBindingRecord", ReplyAction="http://tempuri.org/IMesService/SelectProductBindingRecordResponse")]
        System.Data.DataSet SelectProductBindingRecord(string casecode, string bindingState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectProductBindingRecord", ReplyAction="http://tempuri.org/IMesService/SelectProductBindingRecordResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectProductBindingRecordAsync(string casecode, string bindingState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectPackageProduct", ReplyAction="http://tempuri.org/IMesService/SelectPackageProductResponse")]
        System.Data.DataSet SelectPackageProduct(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectPackageProduct", ReplyAction="http://tempuri.org/IMesService/SelectPackageProductResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectPackageProductAsync(MesManager.MesService.PackageProduct packageProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestProgrameVersion", ReplyAction="http://tempuri.org/IMesService/SelectTestProgrameVersionResponse")]
        System.Data.DataSet SelectTestProgrameVersion(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestProgrameVersion", ReplyAction="http://tempuri.org/IMesService/SelectTestProgrameVersionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectTestProgrameVersionAsync(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestLimitConfig", ReplyAction="http://tempuri.org/IMesService/SelectTestLimitConfigResponse")]
        System.Data.DataSet SelectTestLimitConfig(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTestLimitConfig", ReplyAction="http://tempuri.org/IMesService/SelectTestLimitConfigResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectTestLimitConfigAsync(string productTypeNo);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string userName;
        
        public GetUserInfoRequest() {
        }
        
        public GetUserInfoRequest(string userName) {
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserInfoResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MesManager.MesService.QueryResult GetUserInfoResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataSet dataSet;
        
        public GetUserInfoResponse() {
        }
        
        public GetUserInfoResponse(MesManager.MesService.QueryResult GetUserInfoResult, System.Data.DataSet dataSet) {
            this.GetUserInfoResult = GetUserInfoResult;
            this.dataSet = dataSet;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMesServiceChannel : MesManager.MesService.IMesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MesServiceClient : System.ServiceModel.ClientBase<MesManager.MesService.IMesService>, MesManager.MesService.IMesService {
        
        public MesServiceClient() {
        }
        
        public MesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestCommunication(string value) {
            return base.Channel.TestCommunication(value);
        }
        
        public System.Threading.Tasks.Task<string> TestCommunicationAsync(string value) {
            return base.Channel.TestCommunicationAsync(value);
        }
        
        public MesManager.MesService.LoginResult Login(string username, string password, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.Login(username, password, loginUser);
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.LoginResult> LoginAsync(string username, string password, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.LoginAsync(username, password, loginUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MesManager.MesService.GetUserInfoResponse MesManager.MesService.IMesService.GetUserInfo(MesManager.MesService.GetUserInfoRequest request) {
            return base.Channel.GetUserInfo(request);
        }
        
        public MesManager.MesService.QueryResult GetUserInfo(string userName, out System.Data.DataSet dataSet) {
            MesManager.MesService.GetUserInfoRequest inValue = new MesManager.MesService.GetUserInfoRequest();
            inValue.userName = userName;
            MesManager.MesService.GetUserInfoResponse retVal = ((MesManager.MesService.IMesService)(this)).GetUserInfo(inValue);
            dataSet = retVal.dataSet;
            return retVal.GetUserInfoResult;
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.GetUserInfoResponse> GetUserInfoAsync(MesManager.MesService.GetUserInfoRequest request) {
            return base.Channel.GetUserInfoAsync(request);
        }
        
        public System.Data.DataSet GetAllUserInfo() {
            return base.Channel.GetAllUserInfo();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllUserInfoAsync() {
            return base.Channel.GetAllUserInfoAsync();
        }
        
        public MesManager.MesService.RegisterResult Register(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.Register(username, pwd, phone, email, loginUser);
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.RegisterResult> RegisterAsync(string username, string pwd, string phone, string email, MesManager.MesService.LoginUser loginUser) {
            return base.Channel.RegisterAsync(username, pwd, phone, email, loginUser);
        }
        
        public int DeleteStation(string processName, string stationName) {
            return base.Channel.DeleteStation(processName, stationName);
        }
        
        public System.Threading.Tasks.Task<int> DeleteStationAsync(string processName, string stationName) {
            return base.Channel.DeleteStationAsync(processName, stationName);
        }
        
        public System.Data.DataSet SelectStationList(string processName) {
            return base.Channel.SelectStationList(processName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectStationListAsync(string processName) {
            return base.Channel.SelectStationListAsync(processName);
        }
        
        public System.Data.DataSet SelectProcessList() {
            return base.Channel.SelectProcessList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectProcessListAsync() {
            return base.Channel.SelectProcessListAsync();
        }
        
        public int DeleteAllStation(string processName) {
            return base.Channel.DeleteAllStation(processName);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllStationAsync(string processName) {
            return base.Channel.DeleteAllStationAsync(processName);
        }
        
        public int InsertStation(MesManager.MesService.Station[] stationList) {
            return base.Channel.InsertStation(stationList);
        }
        
        public System.Threading.Tasks.Task<int> InsertStationAsync(MesManager.MesService.Station[] stationList) {
            return base.Channel.InsertStationAsync(stationList);
        }
        
        public int SetCurrentProcess(string processName, int state) {
            return base.Channel.SetCurrentProcess(processName, state);
        }
        
        public System.Threading.Tasks.Task<int> SetCurrentProcessAsync(string processName, int state) {
            return base.Channel.SetCurrentProcessAsync(processName, state);
        }
        
        public int DeleteAllTypeStation() {
            return base.Channel.DeleteAllTypeStation();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllTypeStationAsync() {
            return base.Channel.DeleteAllTypeStationAsync();
        }
        
        public int DeleteTypeStation(string typeNumber) {
            return base.Channel.DeleteTypeStation(typeNumber);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTypeStationAsync(string typeNumber) {
            return base.Channel.DeleteTypeStationAsync(typeNumber);
        }
        
        public System.Data.DataSet SelectTypeStation(string typeNumber) {
            return base.Channel.SelectTypeStation(typeNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectTypeStationAsync(string typeNumber) {
            return base.Channel.SelectTypeStationAsync(typeNumber);
        }
        
        public string CommitTypeStation(System.Collections.Generic.Dictionary<string, string[]> dctData) {
            return base.Channel.CommitTypeStation(dctData);
        }
        
        public System.Threading.Tasks.Task<string> CommitTypeStationAsync(System.Collections.Generic.Dictionary<string, string[]> dctData) {
            return base.Channel.CommitTypeStationAsync(dctData);
        }
        
        public System.Data.DataSet SelectLastTestResultUpper(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResultUpper(sn, typeNo, station);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectLastTestResultUpperAsync(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResultUpperAsync(sn, typeNo, station);
        }
        
        public System.Data.DataSet SelectTestResultUpper(string sn, string typeNo, string station, bool IsSnFuzzy) {
            return base.Channel.SelectTestResultUpper(sn, typeNo, station, IsSnFuzzy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectTestResultUpperAsync(string sn, string typeNo, string station, bool IsSnFuzzy) {
            return base.Channel.SelectTestResultUpperAsync(sn, typeNo, station, IsSnFuzzy);
        }
        
        public System.Data.DataSet SelectMaterial() {
            return base.Channel.SelectMaterial();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialAsync() {
            return base.Channel.SelectMaterialAsync();
        }
        
        public MesManager.MesService.MaterialMsg[] CommitMaterial(MesManager.MesService.MaterialMsg[] list) {
            return base.Channel.CommitMaterial(list);
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.MaterialMsg[]> CommitMaterialAsync(MesManager.MesService.MaterialMsg[] list) {
            return base.Channel.CommitMaterialAsync(list);
        }
        
        public int DeleteMaterial(string materialCode) {
            return base.Channel.DeleteMaterial(materialCode);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialAsync(string materialCode) {
            return base.Channel.DeleteMaterialAsync(materialCode);
        }
        
        public int DeleteAllMaterial() {
            return base.Channel.DeleteAllMaterial();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllMaterialAsync() {
            return base.Channel.DeleteAllMaterialAsync();
        }
        
        public MesManager.MesService.ProductMaterial[] CommitProductMaterial(MesManager.MesService.ProductMaterial[] pmList) {
            return base.Channel.CommitProductMaterial(pmList);
        }
        
        public System.Threading.Tasks.Task<MesManager.MesService.ProductMaterial[]> CommitProductMaterialAsync(MesManager.MesService.ProductMaterial[] pmList) {
            return base.Channel.CommitProductMaterialAsync(pmList);
        }
        
        public System.Data.DataSet SelectProductMaterial(MesManager.MesService.ProductMaterial material) {
            return base.Channel.SelectProductMaterial(material);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectProductMaterialAsync(MesManager.MesService.ProductMaterial material) {
            return base.Channel.SelectProductMaterialAsync(material);
        }
        
        public int DeleteProductMaterial(MesManager.MesService.ProductMaterial material) {
            return base.Channel.DeleteProductMaterial(material);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductMaterialAsync(MesManager.MesService.ProductMaterial material) {
            return base.Channel.DeleteProductMaterialAsync(material);
        }
        
        public string InsertMaterialStatistics(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount) {
            return base.Channel.InsertMaterialStatistics(snInner, snOutter, typeNo, stationName, materialCode, amount);
        }
        
        public System.Threading.Tasks.Task<string> InsertMaterialStatisticsAsync(string snInner, string snOutter, string typeNo, string stationName, string materialCode, string amount) {
            return base.Channel.InsertMaterialStatisticsAsync(snInner, snOutter, typeNo, stationName, materialCode, amount);
        }
        
        public System.Data.DataSet SelectMaterialStatistics(string typeNo) {
            return base.Channel.SelectMaterialStatistics(typeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialStatisticsAsync(string typeNo) {
            return base.Channel.SelectMaterialStatisticsAsync(typeNo);
        }
        
        public System.Data.DataSet SelectMaterialMsg(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll) {
            return base.Channel.SelectMaterialMsg(materialMsg, IsSelectAll);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialMsgAsync(MesManager.MesService.MaterialMsg materialMsg, bool IsSelectAll) {
            return base.Channel.SelectMaterialMsgAsync(materialMsg, IsSelectAll);
        }
        
        public System.Data.DataSet SelectMaterialUserProduct(string materialCode) {
            return base.Channel.SelectMaterialUserProduct(materialCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectMaterialUserProductAsync(string materialCode) {
            return base.Channel.SelectMaterialUserProductAsync(materialCode);
        }
        
        public int CommitProductContinairCapacity(string productTypeNo, string amount, string username, string describle) {
            return base.Channel.CommitProductContinairCapacity(productTypeNo, amount, username, describle);
        }
        
        public System.Threading.Tasks.Task<int> CommitProductContinairCapacityAsync(string productTypeNo, string amount, string username, string describle) {
            return base.Channel.CommitProductContinairCapacityAsync(productTypeNo, amount, username, describle);
        }
        
        public System.Data.DataSet SelectProductContinairCapacity(string productTypeNo) {
            return base.Channel.SelectProductContinairCapacity(productTypeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectProductContinairCapacityAsync(string productTypeNo) {
            return base.Channel.SelectProductContinairCapacityAsync(productTypeNo);
        }
        
        public System.Data.DataSet SelectProductBindingState(string sn) {
            return base.Channel.SelectProductBindingState(sn);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectProductBindingStateAsync(string sn) {
            return base.Channel.SelectProductBindingStateAsync(sn);
        }
        
        public int DeleteProductContinairCapacity(string productTypeNo) {
            return base.Channel.DeleteProductContinairCapacity(productTypeNo);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductContinairCapacityAsync(string productTypeNo) {
            return base.Channel.DeleteProductContinairCapacityAsync(productTypeNo);
        }
        
        public int DeleteAllProductContinairCapacity() {
            return base.Channel.DeleteAllProductContinairCapacity();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllProductContinairCapacityAsync() {
            return base.Channel.DeleteAllProductContinairCapacityAsync();
        }
        
        public System.Data.DataSet SelectProductBindingRecord(string casecode, string bindingState) {
            return base.Channel.SelectProductBindingRecord(casecode, bindingState);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectProductBindingRecordAsync(string casecode, string bindingState) {
            return base.Channel.SelectProductBindingRecordAsync(casecode, bindingState);
        }
        
        public System.Data.DataSet SelectPackageProduct(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.SelectPackageProduct(packageProduct);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectPackageProductAsync(MesManager.MesService.PackageProduct packageProduct) {
            return base.Channel.SelectPackageProductAsync(packageProduct);
        }
        
        public System.Data.DataSet SelectTestProgrameVersion(string productTypeNo) {
            return base.Channel.SelectTestProgrameVersion(productTypeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectTestProgrameVersionAsync(string productTypeNo) {
            return base.Channel.SelectTestProgrameVersionAsync(productTypeNo);
        }
        
        public System.Data.DataSet SelectTestLimitConfig(string productTypeNo) {
            return base.Channel.SelectTestLimitConfig(productTypeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectTestLimitConfigAsync(string productTypeNo) {
            return base.Channel.SelectTestLimitConfigAsync(productTypeNo);
        }
    }
}
