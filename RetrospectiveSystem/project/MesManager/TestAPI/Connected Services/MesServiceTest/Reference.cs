//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestAPI.MesServiceTest {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MaterialType", Namespace="http://schemas.datacontract.org/2004/07/MesWcfService")]
    [System.SerializableAttribute()]
    public partial struct MaterialType : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialBubbleCottonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialFinalStentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLittleScrewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLongScrewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLowerShellField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialOutterShellField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialPCBAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialScrewNutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialSealRingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialSupportPlateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialTempStentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialTopCoverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialUpperShellField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialUseAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialWaterProofRingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialWirebeanField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamLeaderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminField, value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialBubbleCotton {
            get {
                return this.MaterialBubbleCottonField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialBubbleCottonField, value) != true)) {
                    this.MaterialBubbleCottonField = value;
                    this.RaisePropertyChanged("MaterialBubbleCotton");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialFinalStent {
            get {
                return this.MaterialFinalStentField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialFinalStentField, value) != true)) {
                    this.MaterialFinalStentField = value;
                    this.RaisePropertyChanged("MaterialFinalStent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLittleScrew {
            get {
                return this.MaterialLittleScrewField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLittleScrewField, value) != true)) {
                    this.MaterialLittleScrewField = value;
                    this.RaisePropertyChanged("MaterialLittleScrew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLongScrew {
            get {
                return this.MaterialLongScrewField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLongScrewField, value) != true)) {
                    this.MaterialLongScrewField = value;
                    this.RaisePropertyChanged("MaterialLongScrew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLowerShell {
            get {
                return this.MaterialLowerShellField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLowerShellField, value) != true)) {
                    this.MaterialLowerShellField = value;
                    this.RaisePropertyChanged("MaterialLowerShell");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialOutterShell {
            get {
                return this.MaterialOutterShellField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialOutterShellField, value) != true)) {
                    this.MaterialOutterShellField = value;
                    this.RaisePropertyChanged("MaterialOutterShell");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialPCBA {
            get {
                return this.MaterialPCBAField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialPCBAField, value) != true)) {
                    this.MaterialPCBAField = value;
                    this.RaisePropertyChanged("MaterialPCBA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialScrewNut {
            get {
                return this.MaterialScrewNutField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialScrewNutField, value) != true)) {
                    this.MaterialScrewNutField = value;
                    this.RaisePropertyChanged("MaterialScrewNut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialSealRing {
            get {
                return this.MaterialSealRingField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialSealRingField, value) != true)) {
                    this.MaterialSealRingField = value;
                    this.RaisePropertyChanged("MaterialSealRing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialSupportPlate {
            get {
                return this.MaterialSupportPlateField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialSupportPlateField, value) != true)) {
                    this.MaterialSupportPlateField = value;
                    this.RaisePropertyChanged("MaterialSupportPlate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialTempStent {
            get {
                return this.MaterialTempStentField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialTempStentField, value) != true)) {
                    this.MaterialTempStentField = value;
                    this.RaisePropertyChanged("MaterialTempStent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialTopCover {
            get {
                return this.MaterialTopCoverField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialTopCoverField, value) != true)) {
                    this.MaterialTopCoverField = value;
                    this.RaisePropertyChanged("MaterialTopCover");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialUpperShell {
            get {
                return this.MaterialUpperShellField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialUpperShellField, value) != true)) {
                    this.MaterialUpperShellField = value;
                    this.RaisePropertyChanged("MaterialUpperShell");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialUseAmount {
            get {
                return this.MaterialUseAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialUseAmountField, value) != true)) {
                    this.MaterialUseAmountField = value;
                    this.RaisePropertyChanged("MaterialUseAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialWaterProofRing {
            get {
                return this.MaterialWaterProofRingField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialWaterProofRingField, value) != true)) {
                    this.MaterialWaterProofRingField = value;
                    this.RaisePropertyChanged("MaterialWaterProofRing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialWirebean {
            get {
                return this.MaterialWirebeanField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialWirebeanField, value) != true)) {
                    this.MaterialWirebeanField = value;
                    this.RaisePropertyChanged("MaterialWirebean");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductTypeNo {
            get {
                return this.ProductTypeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeNoField, value) != true)) {
                    this.ProductTypeNoField = value;
                    this.RaisePropertyChanged("ProductTypeNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationName {
            get {
                return this.StationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StationNameField, value) != true)) {
                    this.StationNameField = value;
                    this.RaisePropertyChanged("StationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamLeader {
            get {
                return this.TeamLeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamLeaderField, value) != true)) {
                    this.TeamLeaderField = value;
                    this.RaisePropertyChanged("TeamLeader");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MesServiceTest.IMesService")]
    public interface IMesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/TestCommunication", ReplyAction="http://tempuri.org/IMesService/TestCommunicationResponse")]
        string TestCommunication(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/TestCommunication", ReplyAction="http://tempuri.org/IMesService/TestCommunicationResponse")]
        System.Threading.Tasks.Task<string> TestCommunicationAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateTestResultData", ReplyAction="http://tempuri.org/IMesService/UpdateTestResultDataResponse")]
        string UpdateTestResultData(string sn, string typeNo, string station, string result, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateTestResultData", ReplyAction="http://tempuri.org/IMesService/UpdateTestResultDataResponse")]
        System.Threading.Tasks.Task<string> UpdateTestResultDataAsync(string sn, string typeNo, string station, string result, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResult", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultResponse")]
        string[] SelectLastTestResult(string sn, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResult", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultResponse")]
        System.Threading.Tasks.Task<string[]> SelectLastTestResultAsync(string sn, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/UpdateMaterialStatisticsResponse")]
        string UpdateMaterialStatistics(TestAPI.MesServiceTest.MaterialType materialType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/UpdateMaterialStatisticsResponse")]
        System.Threading.Tasks.Task<string> UpdateMaterialStatisticsAsync(TestAPI.MesServiceTest.MaterialType materialType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdatePackageProductBindingMsg", ReplyAction="http://tempuri.org/IMesService/UpdatePackageProductBindingMsgResponse")]
        string UpdatePackageProductBindingMsg(string outCaseCode, string snOutter, string typeNo, string stationName, string bindingState, string remark, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdatePackageProductBindingMsg", ReplyAction="http://tempuri.org/IMesService/UpdatePackageProductBindingMsgResponse")]
        System.Threading.Tasks.Task<string> UpdatePackageProductBindingMsgAsync(string outCaseCode, string snOutter, string typeNo, string stationName, string bindingState, string remark, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateProgrameVersion", ReplyAction="http://tempuri.org/IMesService/UpdateProgrameVersionResponse")]
        string UpdateProgrameVersion(string typeNo, string stationName, string programeName, string programeVersion, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateProgrameVersion", ReplyAction="http://tempuri.org/IMesService/UpdateProgrameVersionResponse")]
        System.Threading.Tasks.Task<string> UpdateProgrameVersionAsync(string typeNo, string stationName, string programeName, string programeVersion, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateLimitConfig", ReplyAction="http://tempuri.org/IMesService/UpdateLimitConfigResponse")]
        string UpdateLimitConfig(string stationName, string typeNo, string limitValue, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdateLimitConfig", ReplyAction="http://tempuri.org/IMesService/UpdateLimitConfigResponse")]
        System.Threading.Tasks.Task<string> UpdateLimitConfigAsync(string stationName, string typeNo, string limitValue, string teamLeader, string admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectCurrentTProcess", ReplyAction="http://tempuri.org/IMesService/SelectCurrentTProcessResponse")]
        string SelectCurrentTProcess();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectCurrentTProcess", ReplyAction="http://tempuri.org/IMesService/SelectCurrentTProcessResponse")]
        System.Threading.Tasks.Task<string> SelectCurrentTProcessAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectAllTProcess", ReplyAction="http://tempuri.org/IMesService/SelectAllTProcessResponse")]
        string[] SelectAllTProcess();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectAllTProcess", ReplyAction="http://tempuri.org/IMesService/SelectAllTProcessResponse")]
        System.Threading.Tasks.Task<string[]> SelectAllTProcessAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectStationList", ReplyAction="http://tempuri.org/IMesService/SelectStationListResponse")]
        string[] SelectStationList(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectStationList", ReplyAction="http://tempuri.org/IMesService/SelectStationListResponse")]
        System.Threading.Tasks.Task<string[]> SelectStationListAsync(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTypeNoList", ReplyAction="http://tempuri.org/IMesService/SelectTypeNoListResponse")]
        string[] SelectTypeNoList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectTypeNoList", ReplyAction="http://tempuri.org/IMesService/SelectTypeNoListResponse")]
        System.Threading.Tasks.Task<string[]> SelectTypeNoListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialList", ReplyAction="http://tempuri.org/IMesService/SelectMaterialListResponse")]
        string[] SelectMaterialList(string productTypeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectMaterialList", ReplyAction="http://tempuri.org/IMesService/SelectMaterialListResponse")]
        System.Threading.Tasks.Task<string[]> SelectMaterialListAsync(string productTypeNo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMesServiceChannel : TestAPI.MesServiceTest.IMesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MesServiceClient : System.ServiceModel.ClientBase<TestAPI.MesServiceTest.IMesService>, TestAPI.MesServiceTest.IMesService {
        
        public MesServiceClient() {
        }
        
        public MesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestCommunication(string value) {
            return base.Channel.TestCommunication(value);
        }
        
        public System.Threading.Tasks.Task<string> TestCommunicationAsync(string value) {
            return base.Channel.TestCommunicationAsync(value);
        }
        
        public string UpdateTestResultData(string sn, string typeNo, string station, string result, string teamLeader, string admin) {
            return base.Channel.UpdateTestResultData(sn, typeNo, station, result, teamLeader, admin);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTestResultDataAsync(string sn, string typeNo, string station, string result, string teamLeader, string admin) {
            return base.Channel.UpdateTestResultDataAsync(sn, typeNo, station, result, teamLeader, admin);
        }
        
        public string[] SelectLastTestResult(string sn, string station) {
            return base.Channel.SelectLastTestResult(sn, station);
        }
        
        public System.Threading.Tasks.Task<string[]> SelectLastTestResultAsync(string sn, string station) {
            return base.Channel.SelectLastTestResultAsync(sn, station);
        }
        
        public string UpdateMaterialStatistics(TestAPI.MesServiceTest.MaterialType materialType) {
            return base.Channel.UpdateMaterialStatistics(materialType);
        }
        
        public System.Threading.Tasks.Task<string> UpdateMaterialStatisticsAsync(TestAPI.MesServiceTest.MaterialType materialType) {
            return base.Channel.UpdateMaterialStatisticsAsync(materialType);
        }
        
        public string UpdatePackageProductBindingMsg(string outCaseCode, string snOutter, string typeNo, string stationName, string bindingState, string remark, string teamLeader, string admin) {
            return base.Channel.UpdatePackageProductBindingMsg(outCaseCode, snOutter, typeNo, stationName, bindingState, remark, teamLeader, admin);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePackageProductBindingMsgAsync(string outCaseCode, string snOutter, string typeNo, string stationName, string bindingState, string remark, string teamLeader, string admin) {
            return base.Channel.UpdatePackageProductBindingMsgAsync(outCaseCode, snOutter, typeNo, stationName, bindingState, remark, teamLeader, admin);
        }
        
        public string UpdateProgrameVersion(string typeNo, string stationName, string programeName, string programeVersion, string teamLeader, string admin) {
            return base.Channel.UpdateProgrameVersion(typeNo, stationName, programeName, programeVersion, teamLeader, admin);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProgrameVersionAsync(string typeNo, string stationName, string programeName, string programeVersion, string teamLeader, string admin) {
            return base.Channel.UpdateProgrameVersionAsync(typeNo, stationName, programeName, programeVersion, teamLeader, admin);
        }
        
        public string UpdateLimitConfig(string stationName, string typeNo, string limitValue, string teamLeader, string admin) {
            return base.Channel.UpdateLimitConfig(stationName, typeNo, limitValue, teamLeader, admin);
        }
        
        public System.Threading.Tasks.Task<string> UpdateLimitConfigAsync(string stationName, string typeNo, string limitValue, string teamLeader, string admin) {
            return base.Channel.UpdateLimitConfigAsync(stationName, typeNo, limitValue, teamLeader, admin);
        }
        
        public string SelectCurrentTProcess() {
            return base.Channel.SelectCurrentTProcess();
        }
        
        public System.Threading.Tasks.Task<string> SelectCurrentTProcessAsync() {
            return base.Channel.SelectCurrentTProcessAsync();
        }
        
        public string[] SelectAllTProcess() {
            return base.Channel.SelectAllTProcess();
        }
        
        public System.Threading.Tasks.Task<string[]> SelectAllTProcessAsync() {
            return base.Channel.SelectAllTProcessAsync();
        }
        
        public string[] SelectStationList(string processName) {
            return base.Channel.SelectStationList(processName);
        }
        
        public System.Threading.Tasks.Task<string[]> SelectStationListAsync(string processName) {
            return base.Channel.SelectStationListAsync(processName);
        }
        
        public string[] SelectTypeNoList() {
            return base.Channel.SelectTypeNoList();
        }
        
        public System.Threading.Tasks.Task<string[]> SelectTypeNoListAsync() {
            return base.Channel.SelectTypeNoListAsync();
        }
        
        public string[] SelectMaterialList(string productTypeNo) {
            return base.Channel.SelectMaterialList(productTypeNo);
        }
        
        public System.Threading.Tasks.Task<string[]> SelectMaterialListAsync(string productTypeNo) {
            return base.Channel.SelectMaterialListAsync(productTypeNo);
        }
    }
}
