//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestAPI.MesService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MesService.IMesService")]
    public interface IMesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertTestResultData", ReplyAction="http://tempuri.org/IMesService/InsertTestResultDataResponse")]
        string InsertTestResultData(string sn, string typeNo, string station, string dateTime, string result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertTestResultData", ReplyAction="http://tempuri.org/IMesService/InsertTestResultDataResponse")]
        System.Threading.Tasks.Task<string> InsertTestResultDataAsync(string sn, string typeNo, string station, string dateTime, string result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResult", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultResponse")]
        string[] SelectLastTestResult(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/SelectLastTestResult", ReplyAction="http://tempuri.org/IMesService/SelectLastTestResultResponse")]
        System.Threading.Tasks.Task<string[]> SelectLastTestResultAsync(string sn, string typeNo, string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/InsertMaterialStatisticsResponse")]
        string InsertMaterialStatistics(string snInner, string snOutter, string typeNo, string stationName, string materialCode, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/InsertMaterialStatistics", ReplyAction="http://tempuri.org/IMesService/InsertMaterialStatisticsResponse")]
        System.Threading.Tasks.Task<string> InsertMaterialStatisticsAsync(string snInner, string snOutter, string typeNo, string stationName, string materialCode, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdatePackageProduct", ReplyAction="http://tempuri.org/IMesService/UpdatePackageProductResponse")]
        string UpdatePackageProduct(string outCaseCode, string snOutter, string bindingState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMesService/UpdatePackageProduct", ReplyAction="http://tempuri.org/IMesService/UpdatePackageProductResponse")]
        System.Threading.Tasks.Task<string> UpdatePackageProductAsync(string outCaseCode, string snOutter, string bindingState);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMesServiceChannel : TestAPI.MesService.IMesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MesServiceClient : System.ServiceModel.ClientBase<TestAPI.MesService.IMesService>, TestAPI.MesService.IMesService {
        
        public MesServiceClient() {
        }
        
        public MesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string InsertTestResultData(string sn, string typeNo, string station, string dateTime, string result) {
            return base.Channel.InsertTestResultData(sn, typeNo, station, dateTime, result);
        }
        
        public System.Threading.Tasks.Task<string> InsertTestResultDataAsync(string sn, string typeNo, string station, string dateTime, string result) {
            return base.Channel.InsertTestResultDataAsync(sn, typeNo, station, dateTime, result);
        }
        
        public string[] SelectLastTestResult(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResult(sn, typeNo, station);
        }
        
        public System.Threading.Tasks.Task<string[]> SelectLastTestResultAsync(string sn, string typeNo, string station) {
            return base.Channel.SelectLastTestResultAsync(sn, typeNo, station);
        }
        
        public string InsertMaterialStatistics(string snInner, string snOutter, string typeNo, string stationName, string materialCode, int amount) {
            return base.Channel.InsertMaterialStatistics(snInner, snOutter, typeNo, stationName, materialCode, amount);
        }
        
        public System.Threading.Tasks.Task<string> InsertMaterialStatisticsAsync(string snInner, string snOutter, string typeNo, string stationName, string materialCode, int amount) {
            return base.Channel.InsertMaterialStatisticsAsync(snInner, snOutter, typeNo, stationName, materialCode, amount);
        }
        
        public string UpdatePackageProduct(string outCaseCode, string snOutter, string bindingState) {
            return base.Channel.UpdatePackageProduct(outCaseCode, snOutter, bindingState);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePackageProductAsync(string outCaseCode, string snOutter, string bindingState) {
            return base.Channel.UpdatePackageProductAsync(outCaseCode, snOutter, bindingState);
        }
    }
}
